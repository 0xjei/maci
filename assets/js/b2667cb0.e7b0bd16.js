"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8271],{7154:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var i=s(5250),t=s(2459);const l={title:"Installing MACI",description:"How to install MACI",sidebar_label:"Installation",sidebar_position:3},o="Installation",r={id:"installation",title:"Installing MACI",description:"How to install MACI",source:"@site/versioned_docs/version-v1.x/installation.md",sourceDirName:".",slug:"/installation",permalink:"/docs/installation",draft:!1,unlisted:!1,editUrl:"https://github.com/privacy-scaling-explorations/maci/edit/dev/website/versioned_docs/version-v1.x/installation.md",tags:[],version:"v1.x",sidebarPosition:3,frontMatter:{title:"Installing MACI",description:"How to install MACI",sidebar_label:"Installation",sidebar_position:3},sidebar:"version-1.x/mySidebar",previous:{title:"Overview",permalink:"/docs/overview"},next:{title:"Primitives",permalink:"/docs/primitives"}},a={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation-1",level:2},{value:"Install <code>rapidsnark</code> (if on an intel chip)",id:"install-rapidsnark-if-on-an-intel-chip",level:3},{value:"Install circom v2:",id:"install-circom-v2",level:3},{value:"Install MACI",id:"install-maci",level:3},{value:"On intel chips",id:"on-intel-chips",level:4},{value:"Configure circomkit",id:"configure-circomkit",level:3},{value:"Download <code>.zkey</code> files (if you would like to use the default parameters or the trusted setup artifacts)",id:"download-zkey-files-if-you-would-like-to-use-the-default-parameters-or-the-trusted-setup-artifacts",level:3},{value:"Generate <code>.zkey</code> files",id:"generate-zkey-files",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsx)(n.p,{children:"You need the following to use MACI:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Node.js: use ",(0,i.jsx)(n.a,{href:"https://github.com/nvm-sh/nvm",children:(0,i.jsx)(n.code,{children:"nvm"})})," to install it. MACI has\nbeen tested with Node 14, 16, 18 and 20. We do however recommend to use Node 18 or Node 20 as Node 14 is deprecated and Node 16 will soon be deprecated too."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.a,{href:"https://github.com/iden3/rapidsnark",children:(0,i.jsx)(n.code,{children:"rapidsnark"})})," tool if running on an intel chip (this allows for faster proof generation vs snarkjs)."]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Note that MACI works on Linux and MacOS. It has not been tested on Windows, however it should work on Windows Subsystem for Linux (WSL). Keep in mind that when using MACI e2e on a non intel chip, tests will run using snarkjs with WASM. This will result in slower proof generation."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installation-1",children:"Installation"}),"\n",(0,i.jsxs)(n.h3,{id:"install-rapidsnark-if-on-an-intel-chip",children:["Install ",(0,i.jsx)(n.code,{children:"rapidsnark"})," (if on an intel chip)"]}),"\n",(0,i.jsx)(n.p,{children:"First, install dependencies:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt-get install build-essential libgmp-dev libsodium-dev nasm git\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Next, clone ",(0,i.jsx)(n.code,{children:"rapidsnark"})," and build it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/iden3/rapidsnark.git && \\\ncd rapidsnark && \\\ngit checkout 1c13721de4a316b0b254c310ccec9341f5e2208e\n\npnpm install && \\\ngit submodule init && \\\ngit submodule update && \\\npnpm exec task createFieldSources && \\\npnpm exec task buildProver\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note the location of the ",(0,i.jsx)(n.code,{children:"rapidsnark"})," binary (e.g.\n",(0,i.jsx)(n.code,{children:"/home/user/rapidsnark/build/prover"}),")."]}),"\n",(0,i.jsx)(n.h3,{id:"install-circom-v2",children:"Install circom v2:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://docs.circom.io/",children:"https://docs.circom.io/"})}),"\n",(0,i.jsxs)(n.p,{children:["Note the location of the ",(0,i.jsx)(n.code,{children:"circom"})," binary (e.g. ",(0,i.jsx)(n.code,{children:"$HOME/.cargo/bin/circom"}),"), as you will need it later."]}),"\n",(0,i.jsx)(n.h3,{id:"install-maci",children:"Install MACI"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/privacy-scaling-explorations/maci.git && \\\ncd maci && \\\npnpm i && \\\npnpm run build\n"})}),"\n",(0,i.jsx)(n.h4,{id:"on-intel-chips",children:"On intel chips"}),"\n",(0,i.jsx)(n.p,{children:"Install dependencies to compile the c++ witness generator:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt-get install libgmp-dev nlohmann-json3-dev nasm g++\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Note that on an ARM macbook you won't need the above. However, you will not be able to compile the c++ witness generator."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"configure-circomkit",children:"Configure circomkit"}),"\n",(0,i.jsxs)(n.p,{children:["Edit ",(0,i.jsx)(n.code,{children:"circuits/circom/circuits"})," to include the circuits you would like to compile. This comes already configured with the three main circuits and with testing parameters:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "ProcessMessages_10-2-1-2_test": {\n    "file": "processMessages",\n    "template": "ProcessMessages",\n    "params": [10, 2, 1, 2],\n    "pubs": ["inputHash"]\n  },\n  "TallyVotes_10-1-2_test": {\n    "file": "tallyVotes",\n    "template": "TallyVotes",\n    "params": [10, 1, 2],\n    "pubs": ["inputHash"]\n  },\n  "SubsidyPerBatch_10-1-2_test": {\n    "file": "subsidy",\n    "template": "SubsidyPerBatch",\n    "params": [10, 1, 2],\n    "pubs": ["inputHash"]\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"download-zkey-files-if-you-would-like-to-use-the-default-parameters-or-the-trusted-setup-artifacts",children:["Download ",(0,i.jsx)(n.code,{children:".zkey"})," files (if you would like to use the default parameters or the trusted setup artifacts)"]}),"\n",(0,i.jsxs)(n.p,{children:["MACI has two main zk-SNARK circuits (plus an optional Subsidy circuit). Each circuit is parameterised. There should one\n",(0,i.jsx)(n.code,{children:".zkey"})," file for each circuit and set of parameters."]}),"\n",(0,i.jsxs)(n.p,{children:["Unless you wish to generate a fresh set of ",(0,i.jsx)(n.code,{children:".zkey"})," files, you should obtain\nthem from someone who has performed a multi-party trusted setup for said\ncircuits. For more details on which artifacts have undergone a trusted setup, please refer to the ",(0,i.jsx)(n.a,{href:"/docs/trusted-setup",children:"Trusted Setup"})," page."]}),"\n",(0,i.jsxs)(n.p,{children:["Note the locations of the ",(0,i.jsx)(n.code,{children:".zkey"})," files as the CLI requires them as command-line flags."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Download test artifacts"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm download:test-zkeys\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Download ceremony artifacts"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm download:ceremony-zkeys\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"generate-zkey-files",children:["Generate ",(0,i.jsx)(n.code,{children:".zkey"})," files"]}),"\n",(0,i.jsxs)(n.p,{children:["If you wish to generate ",(0,i.jsx)(n.code,{children:".zkey"})," files from scratch, first navigate to ",(0,i.jsx)(n.code,{children:"circuits/circom"}),"\nand edit ",(0,i.jsx)(n.code,{children:"circuits.json"}),". Set the parameters you need."]}),"\n",(0,i.jsx)(n.p,{children:"Next, run the following to compile the circuits with parameters you specified:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"for the c++ witness generator"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm test:circuits-c\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"for the wasm witness generator"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm build:circuits-wasm\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Finally, generate the ",(0,i.jsx)(n.code,{children:".zkey"})," files. This may require a lot of memory and time."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm setup:zkeys\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"If on a ARM64 chip, the above will work with the wasm witness only. The errors you will get for the c++ witness are:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"main.cpp:9:10: fatal error: 'nlohmann/json.hpp' file not found\n#include <nlohmann/json.hpp>\n       ^~~~~~~~~~~~~~~~~~~\n1 error generated.\n"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},2459:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>o});var i=s(79);const t={},l=i.createContext(t);function o(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);